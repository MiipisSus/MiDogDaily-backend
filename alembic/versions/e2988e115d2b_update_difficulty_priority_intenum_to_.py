"""Update difficulty & priority IntEnum to Enum in Task Table

Revision ID: e2988e115d2b
Revises: a9559a9aff3b
Create Date: 2024-12-12 13:59:26.272154

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = 'e2988e115d2b'
down_revision: Union[str, None] = 'a9559a9aff3b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('tags_name_key', 'tags', type_='unique')
    op.drop_constraint('tags_owner_id_fkey', 'tags', type_='foreignkey')
    op.create_foreign_key(None, 'tags', 'users', ['owner_id'], ['id'], ondelete='CASCADE')
    op.drop_column('tags', 'is_public')
    op.drop_column('tags', 'name')
    op.drop_constraint('tasks_user_id_fkey', 'tasks', type_='foreignkey')
    op.create_foreign_key(None, 'tasks', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint('tasktaglink_task_id_fkey', 'tasktaglink', type_='foreignkey')
    op.drop_constraint('tasktaglink_tag_id_fkey', 'tasktaglink', type_='foreignkey')
    op.create_foreign_key(None, 'tasktaglink', 'tasks', ['task_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'tasktaglink', 'tags', ['tag_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'tasktaglink', type_='foreignkey')
    op.drop_constraint(None, 'tasktaglink', type_='foreignkey')
    op.create_foreign_key('tasktaglink_tag_id_fkey', 'tasktaglink', 'tags', ['tag_id'], ['id'])
    op.create_foreign_key('tasktaglink_task_id_fkey', 'tasktaglink', 'tasks', ['task_id'], ['id'])
    op.drop_constraint(None, 'tasks', type_='foreignkey')
    op.create_foreign_key('tasks_user_id_fkey', 'tasks', 'users', ['user_id'], ['id'])
    op.add_column('tags', sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('tags', sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'tags', type_='foreignkey')
    op.create_foreign_key('tags_owner_id_fkey', 'tags', 'users', ['owner_id'], ['id'])
    op.create_unique_constraint('tags_name_key', 'tags', ['name'])
    # ### end Alembic commands ###
